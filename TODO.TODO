First MileStone:
  ✔ be able to draw a rectangles, and undo/redo @created(06-06-2021 13:13) @done(06-06-2021 13:14)
    reason: handle ui stuff in somewhat sensible manner and proper undo / redo is very helpfull down the line
  ✔ be able to start and pause a timer @created(06-06-2021 13:13) @done(06-06-2021 14:04)
      reason: more ui interaction
  ✔ be able to control a rectange as 'player' character @created(07-06-2021 19:35) @done(07-06-2021 23:24)
    reason: flesh out ui event system and difference between ui components and game entities
  ✔ play a sound on button click @created(08-06-2021 18:17) @done(08-06-2021 18:17)
    reason: sound is part of a game after all
  ✘ be able to save rectangle and time elapsed to disk @created(06-06-2021 13:13) @cancelled(08-06-2021 19:00)
      reason: handle 'game' state in a smart way, i.e. do NOT save the ui components directly obviously
  ✘ be able to load from disk rectangle and time elapsed @created(06-06-2021 13:13) @cancelled(08-06-2021 19:00)
      reason: what's the point of saving it one can't load
  ✘ be able to continue timer once loaded @created(06-06-2021 13:13) @cancelled(08-06-2021 19:00)
      reason: proof of concept complete

  ✔ closing notes @created(08-06-2021 19:01) @done(08-06-2021 19:04)
      last 3 items are cancelled because current architecture is not fleshed out yet. 
      So in other words doing this prematurely would most likely hamper things down the road. 
      quick retrospective
      keep doing: small incremental changes
      stop doing: trying to fit everything into a single, unified api for no reason other than fabled 'consistency'
      what went well: event system is pretty nice so far and I look forward to using it
      what went less well: need to keep an eye on my own health and learn to enjoy the process

    TODO: 
      ✔ figure out entity collision @created(09-06-2021 20:23) @done(11-06-2021 16:02)
      ✔ implement containsPoint polygon @created(06-06-2021 18:09) @done(02-09-2021 14:15)
      ✔ implement scale polygon @created(06-06-2021 18:09) @done(02-09-2021 14:16)


Second MileStone (ideas):
  ✔ snake game @created(07-06-2021 19:41) @done(02-09-2021 14:10)
    reason: simple yet effective proving grounds of capbilities. Would probably want to include 
    sound since that's important and I've got no experience with it so far. Could also opt to use 
    external assets for visuals as well. 
    
    TODO:
      ✔ create new branch and clear out old stuff @created(12-06-2021 10:45) @done(20-06-2021 14:08)
      ✔ create splashscreen and menu @created(12-06-2021 10:46) @done(20-06-2021 14:08)
      ✔ find sound effects for game over, menu clicks, snake movement, snake consume food, snake slippery? @created(12-06-2021 10:46) @done(20-06-2021 14:08)
      ✔ create easing snake movement @created(12-06-2021 10:54) @done(20-06-2021 14:08)
      ✔ create snake controls @created(12-06-2021 10:56) @done(20-06-2021 14:08)
      ✔ create growing snake on food consumption @created(12-06-2021 10:56) @done(20-06-2021 14:08)
      ✔ create spawn food particles @created(12-06-2021 10:57) @done(20-06-2021 14:08)

      ✔ game over state @created(20-06-2021 14:08) @done(21-06-2021 19:43)
        ✔ create snake head collision with own body is game over @created(12-06-2021 10:56) @done(20-06-2021 16:01)
          see if adjusting the segment size to be smaller than the head resolved the issue of colliding with segments when the head
          is parallel to the body due to locomotion
          if that doesn't solve it, guess implement ray collision
        ✔ adjust bounds, i.e. touching bounds in game over @created(12-06-2021 10:56) @done(20-06-2021 16:01)
        ✔ select game over sound @created(20-06-2021 14:14) @done(20-06-2021 16:01)
        ✔ create game over menu screen @created(20-06-2021 14:14) @done(21-06-2021 19:43)
    
      ✔ create poop particles @created(20-06-2021 14:14) @done(22-06-2021 12:51)
        so I think this can be done rather nicely by passing down a 'isDigisting' boolean from head on food consumption, 
        and then render the segment differently. When the segment has no next, an event needs to be emitted.
        q: are poop particles on a timer? a: yes      
      ✔ poop spawn sound effect @created(22-06-2021 12:53) @done(23-06-2021 19:03)
      ✔ adjust poop particle locatation to use tail center!  @created(22-06-2021 16:31) @done(22-06-2021 16:37)
      ✔ particle spawn on grid, and preferable evenly spaced out. Also need some checking of poop particles @created(20-06-2021 14:28) @done(22-06-2021 17:28)
      ✔ start w 3 segment snake at the place as start button  @created(20-06-2021 14:27) @done(22-06-2021 12:50)     
      ✘ spawn 1 food particle to the right ? @created(22-06-2021 12:50) @cancelled(22-06-2021 17:28)
        cancelled because just spawning a bunch at the start anyway
      ✘ would it make more sense if the new segment is added once the food has been digested.. ? @created(22-06-2021 17:29) @cancelled(22-06-2021 18:28)
        cancelled because yeah I suppose it would, made an attempt at it but failed horribly, not worth it 
      ✔ create coherent color scheme @created(22-06-2021 12:51) @done(24-06-2021 22:23)
      ✘ create score system, e.g. particles eaten & time alive? @created(12-06-2021 10:58) @cancelled(24-06-2021 22:23)
        cancelled because poop particles are no longer causing shrinking snake but game over instead
      ✘ create win condition when snake fills entire play area @created(12-06-2021 10:59) @cancelled(24-06-2021 22:23)
        cancelled because poop particle despawn prevents snake from reaching maximum lenght
      ✔ tweak start screen @created(22-06-2021 17:34) @done(24-06-2021 22:24)
      ✔ create self contained builds windows & linux (see about running linux vm in azue to try this out) @created(24-06-2021 22:26) @done(26-06-2021 14:02)
      ✘ record gameplay w sound @created(24-06-2021 23:40) @cancelled(02-09-2021 14:10)
      ✔ create itchio page .. eh maybe github release is sufficient for now @created(24-06-2021 22:27) @done(26-06-2021 19:27)
      
      ☐ final tweaks & polish @created(26-06-2021 19:28)
        ☐ start game on key enter press when menu / game over screen is showing @created(20-06-2021 16:17)
        ☐ spruce up start menu w controls & credits.. ? @created(24-06-2021 22:27)
        ☐ back button on game over screen @created(24-06-2021 22:28)

Third MileStone:
    ✘ simple asteroids game @created(02-09-2021 14:11) @cancelled(02-09-2021 14:11)
        cancelled because due to my own fuck up I lost the entire todo file for the project and had to revert back to a version
        from 2 months ago. In other words; lost all the tasks and progress for the asteroids project, which was kinda 
        wearing me down with the collision stuff anyway so decided to cancel it all together. 
        That being said, it was a fruitfull project which saw the implementation of various colliders, vast project organisation changes
        as well as me finally somewhat beginning to understand matrix transforms, which is kinda cool. 

Fourth MileStone:
  ☐ prototyping city sim @created(03-09-2021 12:09)
    basically a refined version of the kotlin 2d prototype from years ago. Agents do wonder around, however, they have collisions 
    with zones wholesale, instead of developed plots within zones. Moreover could consider implementing somekind of langton ant crumbs 
    type thingy in order for agents to find their way. The implication here being agents to already have somekind of rudimentary 
    flocking, avoidance and steering behaviours attached to them. 
    
    TODO:
    ✘ zoning mechanics @created(03-09-2021 12:10) @cancelled(05-09-2021 19:02)
      cancelled because pivor to grid approach
      instead of randomized plot layout along the edge, each edge is evenly divided from the center. Corner reconcilletaion is a thing. 
      plots can be marked for development, and when marked, the depth of each plot can be adjusted
      ✘ distribute plots along edges @created(03-09-2021 13:32) @cancelled(05-09-2021 19:03)
      ✘ edge intersection detection @created(03-09-2021 13:32) @cancelled(05-09-2021 19:03)
        basically where to edges intersect with each other, and how do we handle plot distribution in those edge cases - pun intended huhu
      ✘ auto close zone option @created(04-09-2021 12:28) @cancelled(05-09-2021 19:03)
        zones are automatically closed off at the moment, however, should be optional as otherwise it's not possible to just create a single running facade
      ✘ make edge depth adjustable @created(03-09-2021 13:31) @cancelled(05-09-2021 19:03)
        or is this something related to zoning density perhaps.. since we kinda said depth is adjustable on plot level..?
      ✔ make zone point pickable @created(03-09-2021 13:30) @done(04-09-2021 12:23)
      ✘ deleting points w undo/redo .. ? @created(04-09-2021 12:23) @cancelled(05-09-2021 19:03)
        it's kinda cool demonstration of engine capabilites but honestly is it really needed atm?
        also it kinda workds at the moment except it throw things off kilter when adding points
        because we assume some things about points & edges order which are no longer true when deleting abitrary point
      ✘ choose which side of zone edges the plots attach to @created(03-09-2021 13:30) @cancelled(05-09-2021 19:03)
        ..not sure if needed. Like could just indicate it
    ✘ agents @created(04-09-2021 12:40) @cancelled(05-09-2021 19:03)
      cancelled because pivor to grid approach
      should be capable of multiple behaviours, e.g. flocking, seeking, avoidance etc
      ✘ collision detection zones @created(04-09-2021 12:24) @cancelled(05-09-2021 19:03)
          or at least figure out how to determine if a point is on the inside or outside of a given zone
          maybe this could just be handled with attached colliders to the edges? though maybe not for mouse picking
    ✔ global grid @created(05-09-2021 19:03) @done(11-09-2021 13:28)
      global grid cells or ggc for short have various attributes like which occupant they have, resource or polutant etc. 
      could even just not encapsulate this and just have various arrays for attributes since I want index based lookup anyway
      ✔ create basic grid & mouse over demo @created(05-09-2021 19:28) @done(05-09-2021 19:49)
    ☐ street tool @created(05-09-2021 19:03)
      - segments consists of 2 nodes, nodes have neighbors, segments have bounding box? could be useful to determine ggc occupancy
      - should have grid snapping 
      - new segments can be drawn from nodes
      - intersecting segments add nodes 
      - underlying ggc should be marked as occupied, i.e. a diagonal creates a sc4 zig zag pattern
    ☐ brush tool @created(05-09-2021 19:04)
      - acts on ggc 
      - outer ggc should be marked as such in order to determine whether or not it has street access
    ✔ mouse interaction @created(05-09-2021 19:26) @done(11-09-2021 13:27)
      so going to keep this simple I reckon and just have index based lookups. As in, use mouse pos x & y to figure out the grid index. 


SharpRay:
  ✔ update main w asteroids branch @created(03-09-2021 11:06) @done(04-09-2021 12:55)
  ☐ proper click & double click mouse events @created(06-06-2021 14:21)
  ☐ rework and extend undo and redo system @created(04-09-2021 20:23)
    essentially both OnUIEvent and OnKeyBoardEvent in Aplication exist only to deal with undo redo stuff, 
    so rework this to a single method, i.e. a single event type. Moreover, when an entity implements the appropriate interface it 
    should automatically bind to this single method. 
  ☐ rework event emitter system @created(04-09-2021 12:31)
    basically entities should be able to have various event emitter, not BE event emitters
    running into the issue again with drag edit shape, which emits a gui event. However in order to 
    actually have undo / redo capabilties, the event MUST also implement IHasUndoRedo and it's not possible
    to constrain this, or at least couldn't figure it out easily. Much rather have this be explicit, i.e.
    when an entity has undo/redo it must implement an eventEmitter<IUndoRedo> At the moment this is not possible.
      Cancelled because it does forces me to consider what type of entity should emit what type of events. Like, the fact 
      a zone should emit undoredo event makes it clear it is, in fact, not a game entity. So in that regard the system
      works as intended by design. 
    Note uncancelled @created(11-09-2021 13:10)
      so ran into a new issue with protocity. Namely that a button press to de active the transit tool still registers with the transit tool
      and causes a node to be inserted, and then deactives the tool, leaving a segment hanging quite literally. 
      Thus, put more formal; when any gui entity is interacted with the associated mouse or keyboard event should not be emitted to the other registred delegates. 
      Now this poses quite a serious rework of the eventing system, because in order to make than happen it first of all means the keyboard and mouse need to 
      know to what type of receiverd they are emitting, and it needs to have a manual loop of sorts. And since it's not possible to derive from MulticastDelegate class
      I would need to come up with something myself.. So yeah, quite some work..
  ✔ create frame logging system @created(20-06-2021 17:04) @done(04-09-2021 19:26)
    reason: technical challenge and long term beneficial. At the moment there's a weird bug in snake game 
    wherein the order of update vs collision in the main loop is causing food consumption to be triggered twice. 
    Not sure why that is and when figuring it out it would be super helpfull the have a way to tell which events
    were fired and handled during a single frame (i.e. main loop) in which order and which were the emitters
    and receivers. 
      small update @created(04-09-2021 13:28)
      did a little experimenting with callermember name attribute but this is not sufficient to say the least
      in that it only tells me the method it fired from (i.e. EmitEvent) and which source file it's in. 
      What I would like to see is which method it originated in, i.e. the method which made the call to EmitEvent
      as well as instance information about the object. 
      another small update @created(04-09-2021 19:25)
      so I went ahead and added rudimantary event logging to console which can be toggled with a flag in de config. easy peasy and 
      should be sufficient for now. 
  ☐ investigate DI and project organisation @created(06-06-2021 13:17)
    so this kinda goes hand-in-hand with the frame logging & event emitter items. The issue that at the moment it's no possible
    to easily see which classes fired what event and in which order. If there were proper event emitter objects, which could bind to 
    specific methods, and the project had DI, than there could be different implementations of emitters, i.e. those which logged 
    all their events, and those which did not log anything. 
    

Next MileStones / Challenging Ideas:
  ☐ rework shitty snake w new project structure @created(02-09-2021 14:12)
    i.e. put all game related entities and logic into down project
  ☐ manipulate a custom shader in realtime with ui controls @created(07-06-2021 19:41)
    reason: shaders are the bread and butter of a proper runnning game, technical challenging
    This idea came about while thinking about how to create a brush zoning tool so that could be a good
    first start. Like, scrollwheel changes size, on left click puts the brush down, etc. And this would also
    need to support undo / redo
  ☐ simulate a long running process (thread sleep) and figure out how to not block the ui! @created(12-06-2021 10:39)
    reason: this is going to be an issue sooner or later so may as well get it out of the way. 
  ☐ do another spirograph animation tool @created(20-06-2021 14:11)
    reasons: proper animation of easyings could be fun and usefull and it would neat a lot of ui work, like lists and scroll stuff etc, 
    so that would improve the whole ui side of things. 
  ☐ pinball game, just for funsies @created(26-06-2021 14:06)